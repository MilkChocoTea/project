
sudo apt install apache2 php nginx docker docker-compose php-pgsql php-cli php-common php-curl php-mbstring php-xml php-zip
sudo chmod -R 777 /var/www/html/

nginx

server {
        listen 443 ssl default_server;
        listen [::]:443 ssl default_server;
        ssl_certificate /etc/nginx/ssl/nginx-selfsigned.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx-selfsigned.key;
        root /var/www/html;
        index index.php index.html index.htm index.nginx-debian.html;
        server_name mct.local;
        location / {
                proxy_pass http://localhost:8080/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

                try_files $uri $uri/ =404;
                proxy_ssl_verify off;
        }
        location /api/ {
                proxy_pass http://localhost:3000/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, DELETE, PATCH";
                add_header Access-Control-Allow-Headers "Authorization, Content-Type";
                proxy_ssl_verify off;
        }

        location /socket.io/ {
                proxy_pass http://localhost:5000/socket.io/;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "Upgrade";
                proxy_set_header Host $host;
                proxy_cache_bypass $http_upgrade;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
}

/home/mct/docker-postgres/docker-compose.yml
version: '3'

services:
  db:
    image: postgres:15
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: mct
      POSTGRES_PASSWORD: 00123
      POSTGRES_DB: arm
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  postgrest:
    image: postgrest/postgrest
    container_name: postgrest_api
    restart: always
    depends_on:
      - db
    environment:
      PGRST_DB_URI: "postgres://mct:00123@db:5432/arm"
      PGRST_DB_SCHEMA: "public"
      PGRST_DB_ANON_ROLE: "mct"
    ports:
      - "3000:3000"

volumes:
  postgres_data:


sudo docker-compose up -d
sudo docker exec -i postgres_db psql -U mct -d arm < arm.sql
sudo docker exec -it postgres_db psql -U mct -d arm

CREATE OR REPLACE FUNCTION items_notify() RETURNS trigger AS $$ BEGIN PERFORM pg_notify( 'items_channel',row_to_json(NEW)::text ); RETURN NEW; END; $$ LANGUAGE plpgsql;

CREATE TRIGGER items_insert_trigger AFTER INSERT OR UPDATE OR DELETE ON item FOR EACH ROW EXECUTE PROCEDURE items_notify();
